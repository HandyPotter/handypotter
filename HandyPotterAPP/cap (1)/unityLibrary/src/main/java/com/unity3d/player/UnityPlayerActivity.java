// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
package com.unity3d.player;

import android.Manifest;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.Process;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.RelativeLayout;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.ActivityCompat;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.naver.speech.clientapi.SpeechRecognitionResult;
import com.unity3d.player.Frag3.Frag3;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

import static com.unity3d.player.R.anim;
import static com.unity3d.player.R.drawable;
import static com.unity3d.player.R.id;


public class UnityPlayerActivity extends AppCompatActivity implements IUnityPlayerLifecycleEvents
{

    private static final String TAG = UnityPlayerActivity.class.getSimpleName();
    private static final String CLIENT_ID = "zds74cyb5x";



    private RecognitionHandler handler;
    private NaverRecognizer naverRecognizer;
    private AudioWriterPCM writer;

    ArrayList<String> list_stt;
    private BottomNavigationView bottomNavigationView;
    private long recordStartTime;
    private long strStartTime;
    private int elapsedTime;
    private boolean recordOn;
    private String str;
    private boolean pause;
    public String sendMsg = null;
    public String returnMsg = null;
    public String msgSL = null;
    public String msgEMO = null;
    private Frag2 frag2;
    private Frag3 frag3;
    private ConstraintLayout layout;
    private FragmentManager fm;
    private FragmentTransaction ft;
    private InputMethodManager imm;
    private int topFrag;
    private StringBuilder tv;
    private boolean isUnityLoaded;
    private static String subtitle;
    protected UnityPlayer mUnityPlayer; // don't change the name of this variable; referenced from native code
    private Bundle bundle;
    protected String updateUnityCommandLineArguments(String cmdLine)
    {
        return cmdLine;
    }
    private FloatingActionButton fab_01,fab_02,fab_03,fab_04;
    Animation FabOpen, FabClose,FabRClockwise,FabRanticlockwise;
    boolean isOpen;

    public int countEvent;
    // Setup activity layout
    public void setPermission(){
        final int PERMISSION =1;
        if ( Build.VERSION.SDK_INT >= 23 ){
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.INTERNET,
                    Manifest.permission.RECORD_AUDIO,Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE},PERMISSION);
        } /* ㄱ권권    한   설   정*/
    }
    private String getplayTime(long strStartTime){

        elapsedTime = (int)((strStartTime-recordStartTime)/1000);

        str = elapsedTime/3600+":"+elapsedTime/60+":"+elapsedTime%60;
        return str;

    }
    public void makeSub(String mResult,String playTime){

        StringBuilder tv = new StringBuilder();

        if(!(mResult.startsWith("　"))) {
            tv.append(playTime).append("\n");
            tv.append(mResult).append("\n\n");
            subtitle = subtitle + tv;
            Log.d("subtitle",subtitle);

        }
        frag2.subtitle=subtitle;

    }
    private void handleMessage(Message msg) {
        if (msg.what == id.clientReady) {// Now an user can speak.
            strStartTime = System.currentTimeMillis();

            writer = new AudioWriterPCM(
                    Environment.getExternalStorageDirectory().getAbsolutePath() + "/NaverSpeechTest");
            writer.open("Test");
        }
        else if (msg.what == id.audioRecording) {
            writer.write((short[]) msg.obj);
        }
        else if (msg.what == id.partialResult) {// Extract obj property typed with String.
        }
        else if (msg.what == id.finalResult) {
            SpeechRecognitionResult speechRecognitionResult = (SpeechRecognitionResult) msg.obj;
            String a = speechRecognitionResult.getResults().get(0);


            if (!a.isEmpty()) {
                Toast toast = Toast.makeText(getApplicationContext(),a, Toast.LENGTH_LONG);

                toast.setGravity(Gravity.CENTER|Gravity.BOTTOM,10,150);
                toast.show();

                ClientThread thread = new ClientThread();
                thread.start();
                sendMsg = a;
                list_stt.add(a);
                makeSub(a,getplayTime(strStartTime));
            }
        } else if (msg.what == id.recognitionError) {
            if (writer != null) {
                writer.close();
            }

        } else if (msg.what == id.clientInactive) {
            naverRecognizer.getSpeechRecognizer().stop();
            if (writer != null)
                writer.close();

            if (recordOn) {
                naverRecognizer.recognize();
            } else {

            }
        }
    }




    private void setFrag(int n){
        fm= getSupportFragmentManager();
        ft=fm.beginTransaction();

        switch(n){
            case 1:
                layout.addView(mUnityPlayer.getView());
                mUnityPlayer.requestFocus();
                fab_02.setBackgroundResource(drawable.ic_keyboard_voice_orange_24dp);
                isUnityLoaded= true;
                break;

            case 2:
                bundle.putString("sub",subtitle);
                frag2.setArguments(bundle);

                ft.replace(id.main_frame,frag2);
                ft.commit();
                fab_02.setBackgroundResource(drawable.ic_keyboard_voice_black_24dp);
                isUnityLoaded=false;

                break;

            case 3:
                imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
                ft.replace(id.main_frame,frag3);
                ft.commit();
                fab_02.setBackgroundResource(drawable.ic_keyboard_voice_black_24dp);
                isUnityLoaded=false;
                break;

        }
    }
    private int getTopFragID(){
        topFrag = 0;
        if(isUnityLoaded)
        {
            return topFrag = 1;
        }
        else if(frag2.isVisible())
        {
            return topFrag = 2;
        }
        else
        {
            return topFrag = 3;
        }
    }


    private void setListener()
    {
        RelativeLayout rl = findViewById(id.main_frame);


        View.OnKeyListener keyListener1 = new View.OnKeyListener(){
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if(keyCode == KeyEvent.KEYCODE_1)
                {   mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H0+P0+D0+M0");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D2+P14+M0+H1+D10+P13+M16@H11+D4+P14+M1+H1+D10+P13+M16");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                }

                else if(keyCode == KeyEvent.KEYCODE_2)
                {
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D10+P13+M16', 'H11+D10+P13+M16");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H4+P13+D5+M11+H11+P13+D5+M2+M16@H4+P13+D5+M11+H11+P13+D5+M16");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H1+P13+D16+M0");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                }
                else if(keyCode == KeyEvent.KEYCODE_3)
                {
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H12+P7+D4+M1@H12+P7+D4+M8");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D2+P14+M0@H11+D4+P14+M1");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H1+P13+D16+M0");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H12+P13+D17+M0@H0+P13+D7+M4");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                }
                else if(keyCode == KeyEvent.KEYCODE_4)
                {
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D10+P13+M16@H11+D10+P13+M16");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+P13+D8+H11+P13+D1@H3+P13+D4+M3");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0+H1+P13+D4+M7@H11+P7+D9+H1+P14+M5+M7");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D2+P14+M0@H11+D4+P14+M1");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0+H0+P0+D0+M0@H11+P13+D1+M0+H11+P13+D11+M0");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H1+P13+D16+M0");
                    mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                }
                return false;
            }
        };



        rl.setOnKeyListener(keyListener1);
    }
    @Override protected void onCreate(Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_unityplayer);
        setPermission();
        subtitle = "";

        isOpen=false;
        fab_01 = findViewById(id.fab_01);
        fab_02 = findViewById(id.fab_02);
        fab_03 = findViewById(id.fab_03);
        fab_04= findViewById(id.fab_04);
        FabOpen = AnimationUtils.loadAnimation(getApplicationContext(), anim.fab_open);
        FabClose = AnimationUtils.loadAnimation(getApplicationContext(), anim.fab_close);
        FabRClockwise = AnimationUtils.loadAnimation(getApplicationContext(), anim.rotate_clockwise);
        FabRanticlockwise = AnimationUtils.loadAnimation(getApplicationContext(), anim.rotate_anticlockwise);
        frag2 = new Frag2();
        frag3 = new Frag3();
        bundle = new Bundle();

        mUnityPlayer = new UnityPlayer(this, this);
        int glesMode = mUnityPlayer.getSettings().getInt("gles_mode",1);
        boolean trueColor8888 = false;
        mUnityPlayer.init(glesMode, trueColor8888);
        layout = findViewById(id.main_frame);
        countEvent = 0;
        //setFrag(1);
        Intent intent = null;
        try {
            if(getIntent() != null){
                intent = getIntent();
                String sword = intent.getStringExtra("str");
                if(sword != null) {
                    layout.addView(mUnityPlayer.getView());
                    mUnityPlayer.requestFocus();
                    fab_02.setBackgroundResource(drawable.ic_keyboard_voice_orange_24dp);
                    isUnityLoaded= true;
                    ClientThread thread = new ClientThread();
                    thread.start();
                    sendMsg = sword;


                }
            }
        } catch (Exception e) {

            e.printStackTrace();
        }
        setFrag(1);
        handler = new RecognitionHandler(this);
        naverRecognizer = new NaverRecognizer(this, handler, CLIENT_ID);
        list_stt = new ArrayList<String>();
        pause = false;
        recordOn = false;
        //bottomNavigationView = findViewById(R.id.bottom_navi);




        fab_03.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                if (pause) {
                    layout.removeView(mUnityPlayer);
                    setFrag(2);
                    isUnityLoaded = false;

                } else {
                    Log.d(TAG, "STOP RECORDING FIRST");
                }
            }
        });
        fab_04.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                layout.removeView(mUnityPlayer);
                setFrag(3);
                isUnityLoaded = false;

            }
        });
        fab_02.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(isOpen)
                {
                    fab_04.startAnimation(FabClose);
                    fab_03.startAnimation(FabClose);
                    fab_02.startAnimation(FabRanticlockwise);
                    isOpen =false;
                }
                else{

                    fab_03.startAnimation(FabOpen);
                    fab_04.startAnimation(FabOpen);
                    fab_02.startAnimation(FabRClockwise);
                    isOpen =true;
                }
            }
        });
        fab_01.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!( recordOn && naverRecognizer.getSpeechRecognizer().isRunning()) && getTopFragID()==1) {
                    fab_02.setBackgroundResource(drawable.ic_keyboard_voice_black_24dp);
                    recordStartTime = System.currentTimeMillis();
                    naverRecognizer.recognize();
                    recordOn = true;
                    pause = false;

                } else if (recordOn) {
                    fab_02.setBackgroundResource(drawable.ic_keyboard_voice_orange_24dp);
                    Log.d(TAG, "stop and wait Final Result");

                    recordOn = false;
                    pause = true;
                    naverRecognizer.getSpeechRecognizer().stop();

                }
                else if(getTopFragID()!=1)
                {
                    setFrag(1);
                }
            }
        });



    }
    // When Unity player unloaded move task to background
    @Override public void onUnityPlayerUnloaded() {
        moveTaskToBack(true);
    }

    // When Unity player quited kill process
    @Override public void onUnityPlayerQuitted() {
        Process.killProcess(Process.myPid());
    }

    @Override protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        setIntent(intent);
        mUnityPlayer.newIntent(intent);
    }

    // Quit Unity
    @Override protected void onDestroy ()
    {
        mUnityPlayer.destroy();
        super.onDestroy();
        Log.d(TAG,"unity Player on Destroy");
    }

    // Pause Unity
    @Override protected void onPause()
    {
        super.onPause();
        mUnityPlayer.pause();
        Log.d(TAG,"unity Player on Pause");
    }

    // Resume Unity
    @Override protected void onResume()
    {
        super.onResume();
        mUnityPlayer.resume();
        Log.d(TAG,"unity Player resume");
    }

    // Low Memory Unity
    @Override public void onLowMemory()
    {
        super.onLowMemory();
        mUnityPlayer.lowMemory();
    }

    // Trim Memory Unity
    @Override public void onTrimMemory(int level)
    {
        super.onTrimMemory(level);
        if (level == TRIM_MEMORY_RUNNING_CRITICAL)
        {
            mUnityPlayer.lowMemory();
        }
    }

    // This ensures the layout will be correct.
    @Override public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
        mUnityPlayer.configurationChanged(newConfig);
    }

    // Notify Unity of the focus change.
    @Override public void onWindowFocusChanged(boolean hasFocus)
    {
        super.onWindowFocusChanged(hasFocus);
        mUnityPlayer.windowFocusChanged(hasFocus);
    }

    // For some reason the multiple keyevent type is not supported by the ndk.
    // Force event injection by overriding dispatchKeyEvent().
    @Override public boolean dispatchKeyEvent(KeyEvent event)
    {
        if (event.getAction() == KeyEvent.ACTION_MULTIPLE)
            return mUnityPlayer.injectEvent(event);
        return super.dispatchKeyEvent(event);
    }

    // Pass any events not handled by (unfocused) views straight to UnityPlayer
    @Override public boolean onKeyUp(int keyCode, KeyEvent event)     {
        switch(countEvent)
        {
            case 0:
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D2+P14+M0+H1+D10+P13+M16@H11+D4+P14+M1+H1+D10+P13+M16");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                countEvent++;
                break;


            case 1:
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D10+P13+M16', 'H11+D10+P13+M16");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H4+P13+D5+M11+H11+P13+D5+M2+M16@H4+P13+D5+M11+H11+P13+D5+M16");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H1+P13+D16+M0");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                countEvent++;
                break;

            case 2:

                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H12+P7+D4+M1@H12+P7+D4+M8");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D2+P14+M0@H11+D4+P14+M1");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H1+P13+D16+M0");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H12+P13+D17+M0@H0+P13+D7+M4");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                countEvent++;
                break;

            case 3:

                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D10+P13+M16@H11+D10+P13+M16");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+P13+D8+H11+P13+D1@H3+P13+D4+M3");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0+H1+P13+D4+M7@H11+P7+D9+H1+P14+M5+M7");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H11+D2+P14+M0@H11+D4+P14+M1");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0+H0+P0+D0+M0@H11+P13+D1+M0+H11+P13+D11+M0");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "6");
                mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", "H0+P0+D0+M0@H1+P13+D16+M0");
                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", "1");
                countEvent=0;
                break;

        }

        return mUnityPlayer.injectEvent(event); }
    @Override public boolean onKeyDown(int keyCode, KeyEvent event)   { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onTouchEvent(MotionEvent event)          { return mUnityPlayer.injectEvent(event); }
    /*API12*/ public boolean onGenericMotionEvent(MotionEvent event)  { return mUnityPlayer.injectEvent(event); }

    @Override
    protected void onStart() {
        super.onStart();
        naverRecognizer.getSpeechRecognizer().initialize();
    }
    @Override
    protected void onStop() {
        super.onStop();
        // NOTE : release() must be called on stop time.
        naverRecognizer.getSpeechRecognizer().release();
    }


    static class RecognitionHandler extends Handler {
        private final WeakReference<UnityPlayerActivity> mActivity;

        RecognitionHandler(UnityPlayerActivity activity) {
            mActivity = new WeakReference<UnityPlayerActivity>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            UnityPlayerActivity activity = mActivity.get();
            if (activity != null) {
                activity.handleMessage(msg);
            }
        }
    }

    class ClientThread extends Thread {


        public void run() {
            returnMsg = new String("H11+D2+P14+M0+H1+D10+P13+M16@H11+D4+P14+M1+H1+D10+P13+M16//#[6]");
            Log.d(TAG, "thread starts");
            System.out.println("수화 아이디 값 : " + returnMsg);

            if (returnMsg.contains("@")) {
                Log.d(TAG, "contains @");
                StringTokenizer token = new StringTokenizer(returnMsg, "//");
                StringTokenizer token2 = new StringTokenizer(returnMsg, "#");
                int count = token.countTokens();
                int count2 = token.countTokens();

                for (int i = 0; i < count; i++) {
                    msgSL = token.nextToken();
                    Log.d(TAG, "get next token");
                    if (msgSL.startsWith("#")) {
                        Log.d(TAG, "MSGEMO" + msgEMO);
                        msgEMO = msgSL.substring(2, 3);

                        mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", msgEMO);
                        Log.d(TAG, "unity send Emotion");
                        msgEMO = "";
                    }
                    mUnityPlayer.UnitySendMessage("Ch22_nonPBR", "inputQuery", msgSL);
                    Log.d(TAG, "unity send");

                    msgSL = "";
                }
            }
        }
        /*public void run() {
            int port = 9999;
            String host = "3.18.113.12";

            try {

                Socket client = new Socket();
                // 소켓에 접속하기 위한 접속 정보를 선언한다.

                InetSocketAddress ipep = new InetSocketAddress(host, port);
                // 소켓 접속!
                client.connect(ipep);

                // 소켓이 접속이 완료되면 inputstream과 outputstream을 받는다.

                OutputStream sender = client.getOutputStream();
                InputStream receiver = client.getInputStream();

                try {
                    // string을 byte배열 형식으로 변환한다.
                    byte[] data = sendMsg.getBytes();
                    // ByteBuffer를 통해 데이터 길이를 byte형식으로 변환한다.
                    ByteBuffer b = ByteBuffer.allocate(4);
                    // byte포멧은 little 엔디언이다.
                    b.order(ByteOrder.LITTLE_ENDIAN);
                    b.putInt(data.length);
                    // 데이터 길이 전송
                    sender.write(b.array(), 0, 4);
                    // 데이터 전송
                    sender.write(data);

                    byte[] receivedata;
                    receivedata = new byte[4];
                    // 데이터 길이를 받는다.
                    receiver.read(receivedata, 0, 4);
                    // ByteBuffer를 통해 little 엔디언 형식으로 데이터 길이를 구한다.
                    ByteBuffer getb = ByteBuffer.wrap(receivedata);
                    getb.order(ByteOrder.LITTLE_ENDIAN);
                    int length = getb.getInt();
                    // 데이터를 받을 버퍼를 선언한다.
                    receivedata = new byte[length];
                    // 데이터를 받는다.
                    receiver.read(receivedata, 0, length);

                    // byte형식의 데이터를 string형식으로 변환한다.
                    returnMsg = new String(receivedata, "UTF-8");
                    System.out.println("수화 아이디 값 : " + returnMsg);

                    if (returnMsg.contains("@")){
                        StringTokenizer token = new StringTokenizer(returnMsg, "//");
                        StringTokenizer token2 = new StringTokenizer(returnMsg, "#");
                        int count = token.countTokens();
                        int count2 = token.countTokens();

                        for (int i = 0; i < count; i++){
                            msgSL = token.nextToken();
                            if(msgSL.startsWith("[")){
                                Log.d(TAG,"MSGEMO" + msgEMO);
                                msgEMO = msgSL.substring(7,8);

                                mUnityPlayer.UnitySendMessage("Main Camera", "setEmotionToBackground", msgEMO);
                                Log.d(TAG,"unity send Emotion");
                                msgEMO = "";
                            }
                            mUnityPlayer.UnitySendMessage("Ch22_nonPBR","inputQuery", msgSL);
                            Log.d(TAG,"unity send");

                            msgSL="";
                        }


                    }


                    System.out.println("수화 아이디 값 : " + msgSL);
                    System.out.println("수화 감정 값 : " + msgEMO);

                } catch (IOException e) {
                    e.printStackTrace();
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        }*/

    }
}
